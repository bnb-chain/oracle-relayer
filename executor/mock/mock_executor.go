// Code generated by MockGen. DO NOT EDIT.
// Source: executor/executor.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/bnb-chain/go-sdk/common/types"
	msg "github.com/bnb-chain/go-sdk/types/msg"
	common "github.com/binance-chain/oracle-relayer/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBbcExecutor is a mock of BbcExecutor interface
type MockBbcExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockBbcExecutorMockRecorder
}

// MockBbcExecutorMockRecorder is the mock recorder for MockBbcExecutor
type MockBbcExecutorMockRecorder struct {
	mock *MockBbcExecutor
}

// NewMockBbcExecutor creates a new mock instance
func NewMockBbcExecutor(ctrl *gomock.Controller) *MockBbcExecutor {
	mock := &MockBbcExecutor{ctrl: ctrl}
	mock.recorder = &MockBbcExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBbcExecutor) EXPECT() *MockBbcExecutorMockRecorder {
	return m.recorder
}

// GetAddress mocks base method
func (m *MockBbcExecutor) GetAddress() types.ValAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(types.ValAddress)
	return ret0
}

// GetAddress indicates an expected call of GetAddress
func (mr *MockBbcExecutorMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockBbcExecutor)(nil).GetAddress))
}

// GetCurrentSequence mocks base method
func (m *MockBbcExecutor) GetCurrentSequence(chainId uint16) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentSequence", chainId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentSequence indicates an expected call of GetCurrentSequence
func (mr *MockBbcExecutorMockRecorder) GetCurrentSequence(chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentSequence", reflect.TypeOf((*MockBbcExecutor)(nil).GetCurrentSequence), chainId)
}

// GetProphecy mocks base method
func (m *MockBbcExecutor) GetProphecy(chainId uint16, sequence int64) (*msg.Prophecy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProphecy", chainId, sequence)
	ret0, _ := ret[0].(*msg.Prophecy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProphecy indicates an expected call of GetProphecy
func (mr *MockBbcExecutorMockRecorder) GetProphecy(chainId, sequence interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProphecy", reflect.TypeOf((*MockBbcExecutor)(nil).GetProphecy), chainId, sequence)
}

// Claim mocks base method
func (m *MockBbcExecutor) Claim(chainId uint16, sequence uint64, payload []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claim", chainId, sequence, payload)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claim indicates an expected call of Claim
func (mr *MockBbcExecutorMockRecorder) Claim(chainId, sequence, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claim", reflect.TypeOf((*MockBbcExecutor)(nil).Claim), chainId, sequence, payload)
}

// MockBscExecutor is a mock of BscExecutor interface
type MockBscExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockBscExecutorMockRecorder
}

// MockBscExecutorMockRecorder is the mock recorder for MockBscExecutor
type MockBscExecutorMockRecorder struct {
	mock *MockBscExecutor
}

// NewMockBscExecutor creates a new mock instance
func NewMockBscExecutor(ctrl *gomock.Controller) *MockBscExecutor {
	mock := &MockBscExecutor{ctrl: ctrl}
	mock.recorder = &MockBscExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBscExecutor) EXPECT() *MockBscExecutorMockRecorder {
	return m.recorder
}

// GetBlockAndPackages mocks base method
func (m *MockBscExecutor) GetBlockAndPackages(height int64) (*common.BlockAndPackageLogs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockAndPackages", height)
	ret0, _ := ret[0].(*common.BlockAndPackageLogs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockAndPackages indicates an expected call of GetBlockAndPackages
func (mr *MockBscExecutorMockRecorder) GetBlockAndPackages(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockAndPackages", reflect.TypeOf((*MockBscExecutor)(nil).GetBlockAndPackages), height)
}
